#!/bin/bash
@import Foundation/out
@import Foundation/string
@import File/check
@import File/new
@import File/read
@import File/remove
@import Date
@import NullAction

function s_log() {
	if [[ $(File.isDirectory "${LOGS}") ]]; then
		File.append "${LOGS}/log-${OS_STARTED_TIME}" "$(Date.getTimeStamp): $@" --create
	fi
}

function bootargs() {
	# Loop through $BOOTARGS
	for arg in $BOOTARGS; do
		if [[ "$1" == "$arg" ]]; then
			echo "true"
		fi
	done
}

function verbose() {
	s_log "[VERBOSE]: $@"
	if [[ $(bootargs "verbose") ]]; then
		println "${GREEN}[+]: $@"
	fi
}

function verbose_err() {
	s_log "[VERBOSE_ERR]: $@"
	if [[ $(bootargs "verbose") ]]; then
		println "${RED}[-]: $@"
	fi
}

function verbose_warn() {
	s_log "[VERBOSE_WARN]: $@"
	if [[ $(bootargs "verbose") ]]; then
		println "${YELLOW}[!]: $@"
	fi
}

function shellNotify() {
	s_log "[SHELL_NOTIFY]: $@"

	# Notify the shell - If the first parameter is null, then use read mode
	NOTIFIERPATH="${CACHE}/notifier"
	if [[ $(String.isNull "$1") ]]; then
		if [[ $(File.isFile "${NOTIFIERPATH}") ]]; then
			s_log "[SHELL_NOTIFY]: Notifying shell..."
			File.readString "${NOTIFIERPATH}" content
			verbose "Notifying shell: ${content}"
			println "${BLUE}${content}"
			File.removeFile "${NOTIFIERPATH}"
		else
			s_log "[SHELL_NOTIFY]: No notification for shell..."
		fi
	else
		if [[ $(bootargs "verbose") ]]; then
			println "${BLUE}[#]: $@"
		fi
		s_log "[SHELL_NOTIFY]: Writing notification for shell..."
		if [[ $(File.isFile "${NOTIFIERPATH}") ]]; then
			File.overwrite "${NOTIFIERPATH}" "$1"
		else
			File.append "${NOTIFIERPATH}" "$1"
		fi
	fi
}

function shellCommandRead() {
	# Read command queued
	s_log "[SHELL_COMMAND]: Reading queued command..."
	if [[ $(File.isFile "${CACHE}/shell-command-queue") ]] ; then
		File.readString "${CACHE}/shell-command-queue" command
		s_log "[SHELL_COMMAND]: Queued command: ${command}"
		echo "${command}"
		File.removeFile "${CACHE}/shell-command-queue"
	fi
}


function shellCommand() {
	s_log "[SHELL_COMMAND]: $@"
	if [[ $(bootargs "verbose") ]]; then
		println "${MAGENTA}[C]: $@"
	fi

	# Execute command
	if [[ ! $(String.isNull "$1") ]]; then
		s_log "[SHELL_COMMAND]: Adding command to queue..."

		# Shell command notified
		# Check for command: privilage
		if [[ "$(String.contains "$1" "privilage")" ]]; then
			println "${YELLOW}Current process is trying to change current privilage. Accept? (Y/N)"
			read yn
			if [[ "$yn" == "Y" ]] || [[ "$yn" == "y" ]]; then
				# Elevate privilage
				Hermes.appStart "${SYSTEM}/Library/CoreApplications/Guard.proapp" exec ${1}
				exitCode=$?

				if [[ ${exitCode} == 0 ]]; then
					NullAction.doNothing
				else
					println "${RED}Task unauthorized."
					return
				fi
			else
				println "${RED}Task unauthorized."
				return
			fi

		# Check for command: pwr_shutdown
		elif [[ "$(String.contains "$1" "pwr_shutdown")" ]]; then
			println "${YELLOW}Current process is trying to shutdown the device. Accept? (Y/N)"
			read yn
			if [[ "$yn" == "Y" ]] || [[ "$yn" == "y" ]]; then
				# Elevate privilage
				Hermes.appStart "${SYSTEM}/Library/CoreApplications/Guard.proapp" exec ${1}
				exitCode=$?

				if [[ ${exitCode} == 0 ]]; then
					NullAction.doNothing
				else
					println "${RED}Task unauthorized."
					return
				fi
			else
				println "${RED}Task unauthorized."
				return
			fi

		# Check for command: pwr_restart
		elif [[ "$(String.contains "$1" "pwr_restart")" ]]; then
			println "${YELLOW}Current process is trying to reboot the device. Accept? (Y/N)"
			read yn
			if [[ "$yn" == "Y" ]] || [[ "$yn" == "y" ]]; then
				# Elevate privilage
				Hermes.appStart "${SYSTEM}/Library/CoreApplications/Guard.proapp" exec ${1}
				exitCode=$?

				if [[ ${exitCode} == 0 ]]; then
					NullAction.doNothing
				else
					println "${RED}Task unauthorized."
					return
				fi
			else
				println "${RED}Task unauthorized."
				return
			fi
		fi
		
		# Add command to queue
		if [[ "$(File.isFile "${CACHE}/shell-command-queue")" ]]; then
			File.append "${CACHE}/shell-command-queue" "$1"
		else
			File.overwrite "${CACHE}/shell-command-queue" "$1"
		fi
	fi
}

export -f s_log
export -f bootargs
export -f verbose
export -f verbose_err
export -f verbose_warn
export -f shellNotify
export -f shellCommand