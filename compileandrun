#!/bin/bash

cd "$(dirname "$0")/../"
pth="$PWD/System"

function String.isNull() {
	export testfor="$1"
	if [[ -z "$testfor" ]] || [[ "$testfor" == "$NULL" ]]; then
		echo "true"
	fi
	unset testfor
}

function String.replace() {
	if [[ $(String.isNull "$1") ]] && [[ $(String.isNull "$2") ]] && [[ $(String.isNull "$3") ]]; then
		echo "String.replace - Not enough parameters given."
		exit
	fi
	export buffer="$(echo "$1" | sed "s/$2/$3/g")"
	if [[ $(String.isNull "$4") ]]; then
		echo "$buffer"
		unset buffer
	else
		export $4="$buffer"
		unset buffer
	fi
}

if [[ -z "$(which shc)" ]]; then
	echo "ERROR: SHC not installed!"
	exit 1
fi

if [[ ! "$1" == "nocompile" ]]; then
	echo "Sync start."
	rm -rf "$PWD/System"
	mkdir -p "$PWD/System"
	cp -r "$PWD/Sources/" "$PWD/System/"
	rm -rf "$PWD/System/.git" 2>/dev/null
	rm -rf "$PWD/System/.gitattributes" 2>/dev/null
	rm -rf "$PWD/System/.gitignore" 2>/dev/null
	rm -rf "$PWD/System/README.md" 2>/dev/null
	rm -rf "$PWD/System/compileandrun" 2>/dev/null
	rm -rf "$PWD/System/latest" 2>/dev/null
	rm -rf "$PWD/System/prepscript.sh" 2>/dev/null
	echo "Sync done."

	# .sh
	LIST=$(find "$pth" -name *.sh -depth)
	echo ".sh files:"
	echo "$LIST"
	echo "$LIST" | while read line
	do
		cd "$(dirname "$line")"
		echo "PROCESSING: $line"
		shc -r -f "$line"
		echo "BUILDING:   $line"
		gcc "$line.x.c" -o "$line"
		name=$(echo "$line" | cut -f 1 -d '.')
		mv "$name.sh" "$name" 2>/dev/null
	done

	# .proapp
	LIST=$(find "$pth" -name *.sh -depth)
	echo "$LIST" | while read line
	do
		name="$(String.replace "$line" ".sh" "")"
		echo "Renaming ProApp executive: $name"
		chmod +x "$line" 2>/dev/null
		mv "$line" "$name" 2>/dev/null
		echo "Updating resources as executable..."
	done

	echo "Cleaning things up..."
	echo "Removing .sh.x.c files."
	find "$pth" -name *.sh.x.c -depth -exec rm {} \;
	echo "Removing .x.c files."
	find "$pth" -name *.x.c -depth -exec rm {} \;
	echo "Removing .sh.x files."
	find "$pth" -name *.sh.x -depth -exec rm {} \;
	echo "Build complete."
elif [[ "$1" == "norun" ]]; then
	exit 0
elif [[ "$1" == "pkg" ]]; then
	zip -rq "image.zip" . -x ".*" -x "__MACOSX"
	exit 0
fi
"$PWD/System/Boot/x64" "$@"